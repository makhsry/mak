name: Update README

on:
  push:
    branches:
      - main
    paths:
      - 'assets/md_files/**'
      - '.github/workflows/**'
  #schedule:
  # - cron: "0 * * * *"
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1 pinned
        with:
          persist-credentials: true # required to push back files 
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build README files from markdown files
        run: |
          set -euo pipefail # Exit on error, undefined vars, pipe failures

          input_dir="assets/md_files/"
          output_file="README.md"
          output_file_dummy="README_dummy.md"
          
          # Validating input directory exists
          if [ ! -d "${input_dir}" ]; then
            echo "Error: Input directory ${input_dir} not found"
            exit 1
          fi

          # Array of markdown files to concatenate
          files=(
            "introduction.md"
            "education.md"
            "experience.md"
            "awards.md"
            "talks.md"
            "publications.md"
          )

          # Validate all required files exist and check sizes
          for file in "${files[@]}"; do
            filepath="${input_dir}${file}"
            
            # Check file exists
            if [ ! -f "${filepath}" ]; then
              echo "Error: Required file ${filepath} not found"
              exit 1
            fi
            
            # Check file is readable
            if [ ! -r "${filepath}" ]; then
              echo "Error: Cannot read file ${filepath}"
              exit 1
            fi
            
            # Check file size (limit to 2MB per file)
            size=$(stat -c%s "${filepath}" 2>/dev/null || stat -f%z "${filepath}")
            if [ "${size}" -gt 2097152 ]; then
              echo "Error: File ${filepath} exceeds 2MB size limit"
              exit 1
            fi
            
            echo "Validated: ${filepath} (${size} bytes)"
          done
          
          # Clear or create output files
          > "${output_file}"
          > "${output_file_dummy}"

          # README file that will live on repo has a top header table 
          if [ -f "${input_dir}headers-top.md" ]; then
            cat "${input_dir}headers-top.md" >> "${output_file}"
          else
            echo "Warning: headers-top.md not found, skipping header"
          fi

          # Loop through files and concatenate
          for file in "${files[@]}"; do
            filepath="${input_dir}${file}"
            cat "${filepath}" >> "${output_file}"
            echo -e "\n\n" >> "${output_file}"
            cat "${filepath}" >> "${output_file_dummy}"
            echo -e "\n\n" >> "${output_file_dummy}"
          done
          
          echo "README files built successfully"         
      #-------------------------------------------------------
      #- name: Install Pandoc and XeLaTeX
      #  run: |
      #    sudo apt-get update -qq
      #    sudo apt-get install -y pandoc texlive-xetex
      #
      #- name: Convert README.md to PDF - gfm interprets Markdown like GitHub does 
      #  run: |
      #    pandoc README.md -o README.pdf \
      #      --from=gfm \
      #      --standalone \
      #      --pdf-engine=xelatex
      #- name: Convert HTML images to Markdown for PDF
      #  run: |
      #    sed -i -E 's|<img src="([^"]*)" width="([^"]*)">|![](\1){ width=\2px }|g' README_dummy.md
      #-------------------------------------------------------      
      - name: Create LaTeX header file      
        run: |
          set -euo pipefail

          cat > header.tex << 'EOF'
          \usepackage{xcolor}
          \usepackage{fancyhdr}
          \pagestyle{fancy}
          \fancyhead[L]{\large\textbf{Milad Asgarpour Khansary (MAK)}}       
          \fancyhead[C]{} 
          \fancyhead[R]{}   
          \fancyfoot[L]{}
          \fancyfoot[C]{\thepage}
          \fancyfoot[R]{\tiny\scalebox{1.0}{\textcolor{red}{Generated on \today\ by \includegraphics[height=1.25ex]{assets/img_files/socials/GitHub.png}github-actions[bot]}}}
          \renewcommand{\headrulewidth}{0.4pt}
          \renewcommand{\footrulewidth}{0.4pt}
          EOF
      
          # Validate header file was created
          if [ ! -f "header.tex" ]; then
            echo "Error: Failed to create header.tex"
            exit 1
          fi

      - name: Convert Markdown to PDF
        uses: docker://pandoc/latex:3.4
        with:
          args: >-
            --from=gfm
            --output=README.pdf
            --pdf-engine=xelatex
            --include-in-header=header.tex
            --variable=geometry:a4paper
            --variable=geometry:margin=2cm
            --variable=graphics=true
            --variable=linkcolor=blue
            --variable=urlcolor=blue
            --variable=toccolor=blue 
            --highlight-style=tango
            --standalone
            --fail-if-warnings
            README_dummy.md

      - name: Validate generated files
        run: |
          set -euo pipefail
          
          # Check README.md exists and is not empty
          if [ ! -s "README.md" ]; then
            echo "Error: README.md is empty or missing"
            exit 1
          fi
          
          # Check PDF exists and is not empty
          if [ ! -s "README.pdf" ]; then
            echo "Error: README.pdf is empty or missing"
            exit 1
          fi
          
          # Verify PDF is valid (basic check)
          if ! file README.pdf | grep -q "PDF"; then
            echo "Error: README.pdf is not a valid PDF file"
            exit 1
          fi
          
          echo "All generated files validated successfully"

      - name: Check for changes
        id: check_changes
        run: |
          git diff --exit-code README.md README.pdf || echo "changes=true" >> $GITHUB_OUTPUT
     
      - name: Clean up temporary files
        run: |
          rm -f header.tex README_dummy.md      

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          set -euo pipefail
          
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Only add specific files
          git add README.md README.pdf
          
          # Verify only expected files are staged
          staged_files=$(git diff --cached --name-only)
          for staged_file in $staged_files; do
            if [[ ! "$staged_file" =~ ^(README\.md|README\.pdf)$ ]]; then
              echo "Error: Unexpected file staged: $staged_file"
              exit 1
            fi
          done
          
          # Commit with [skip ci] to prevent infinite loops
          git commit -m "Automated README update [skip ci]"
          
          # Push using GITHUB_TOKEN
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        if: always()
        run: |
          echo "### Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "README.md" ]; then
            echo "✅ README.md generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ README.md generation failed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "README.pdf" ]; then
            echo "✅ README.pdf generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ README.pdf generation failed" >> $GITHUB_STEP_SUMMARY
          fi
# EoF 