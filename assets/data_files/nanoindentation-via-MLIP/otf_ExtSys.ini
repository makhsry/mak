mlip								mtpr             # <string>    MLIP type: "MTP" or "MTPR" or "void"
    # MTP - linearly parametrized MTP           #             Moment Tensor Potential is used
    # MTPR - non-linearly parametrized multicomponent MTP #   Moment Tensor Potential "Radial" is used
    # void - no machine learning potential      #             Used when driver should use ab initio potential and no MLIP features are required
    mlip:load-from					../../mlip/curr.mtp         # <string>    Filename with MTP. If not specified driver operates directly with Ab-Initio model (without additional routines)
calculate-efs						TRUE            # <bool>      Enables/disables EFS calculation by MTP (disabled learning may be usefull in pure learning/selection regime for best performance)
select								TRUE            # <bool>      Activates/deactivates selection (active learning engine)
    select:site-en-weight			0.0             # <double>    Weight for site energy equations in selection procedure
    select:energy-weight			1.0             # <double>    Weight for energy equation in selection procedure
    select:force-weight				0.0             # <double>    Weight for forces equations in selection procedure
    select:stress-weight			0.0             # <double>    Weight for stresses equations in selection procedure
    select:weight-scaling			2				# <string>	  Indicates how the weights for energy and for stress are scaled with the number of atoms. The corresponded weight is divided by the number of atoms in the power (select:weight-scaling / 2)
    select:threshold-init			0.000001        # <double>    Parameter for initiating selecting process (should be >0 but small)
    select:threshold				1.1             # <double>    Selection threshold - maximum allowed extrapolation level (should be >=1)
    select:threshold-swap			1.000001        # <double>    Treshold for the following swaps if selection threshold is reached (should be >=1)
    select:threshold-break			11              # <double>    Break the program if this threshold exceeded. Activated if >1.0. If activated updates of selected set are restricted
    select:save-selected			selected.cfg         # <string>    Selected configurations will be saved in this file after selection is complete. No configuration saving if not specified
#    select:save-state				new_state.mvs   # <string>    The state of the selection will be saved in this file after selection is complete. No saving if not specified. Can be used for further continue selection/learning on the fly
    select:load-state				../../mlip/state.mvs   # <string>    The state of the selection will be loaded from this file before selection starts. No saving if not specified. Used to continue selection/learning on the fly
    select:efs-ignored				FALSE            # <bool>      Indicates that driver actually does not need EFS to be calculated (e.g. in fitting scenario). "TRUE" value may speed up processing by skipping some extra EFS calculations 
    select:multiple				FALSE			# <bool>      Switches to multiple selection mode if true. In this case configurations are added for selection whereas selection is done only once in the end of program execution (or when the configuration count commited for selection reaches 'select:multiple:by-count' count). It requires storing of the all processed configuration and related data that can cause memory limitation issues. Multiple selection mode is incompatible with learning on the fly. If false the selected set is updated after processing of each configuration. 
    select:multiple:by-count			0				# <int>		  In multiple selection mode configurations are commited for selection until the number of commited configurations reaches this number. After that, selection between all collected configurations is performed. Unlimited if 0 is set
    select:swap-limit				0				# <int>		  Maximal allowed number of swaps while selection. Unlimited if 0
    select:treat-locals				FALSE			# <bool>	  When selecting by forces or site energies the selected local environments are extracted, stored and handled as new configurations after being selected. Otherwise the original configurations are stored and handled
    select:log					selection.log   # <string>    Where to write selection log. No logging if not specified; if "stdout" and "stderr" corresponds to standard output streams; otherwise log will be outputed to file with that name
fit					        FALSE   # <bool>      Enables/disables MTP learning
    fit:save						../../mlip/curr.mtp         # <string>    Output MTP file name (for trained MTP)
    fit:energy-weight				1.0             # <double>    Weight for energy equation in fitting procedure
    fit:force-weight				0.001           # <double>    Weight for forces equations in fitting procedure
    fit:stress-weight				0.1             # <double>    Weight for stresses equations in fitting procedure
    fit:scale-by-force				0.0             # <double>    If greater than zero, large forces will be fitted less accurate than small 
	fit:select-factor				1.0             # <double>    Factor to decrease weight for NON-selected equations while fitting (0-1). If 1 all equations in selected configurations are accounted with 'fit:energy-weight', 'fit:force-weight', 'fit:stress-weight'. If 0 fitting is done only to the selected equations
	fit:weight-scaling-energy		1				# <string>	  Indicates how the weights for energy equation is scaled with the number of atoms. The corresponded weight is divided by the number of atoms in the power (fit:weight-scaling-energy / 2)
	fit:weight-scaling-forces		0				# <string>	  Indicates how the weights for forces equation is scaled with the number of atoms. The corresponded weight is divided by the number of atoms in the power (fit:weight-scaling-forces / 2)
	fit:weight-scaling-stress		1				# <string>	  Indicates how the weights for stress equation is scaled with the number of atoms. The corresponded weight is divided by the number of atoms in the power (fit:weight-scaling-stress / 2)
    fit:log							stdout          # <string>    Where to write fitting log. No logging if not specified; if "stdout" and "stderr" corresponds to standard output streams; otherwise log will be outputed to file with that name
#check-errors						errors.log      # <string>    If present enables comparison and accumulation of error statistics for EFS calculated by ab-initio model and MTP. Requires specified ab-initio model. Value indicates where to write log of learning on the fly process. No logging if not specified; if "stdout" and "stderr" corresponds to standard output streams; otherwise log will be outputed to file with that name
write-cfgs							record.cfgs     # <string>    File for writing all processed configurations. No confuguration recording if not specified
    write-cfgs:skip					0               # <int>       Skip this number of configurations while writing
#log									lotf.log        # <string>    Where to write MLIP log. No logging if not specified; if "stdout" and "stderr" corresponds to standard output streams; otherwise log will be outputed to file with that name
	abinitio                            FALSE       # <string>    Defines Ab-initio model
	abinitio:vasp    TRUE
    # null - no Ab-initio model                        #            If Ab-initio model is not required    
    # void - EFS data should be provided               #            Used if driver provides EFS data with configurations. No additional EFS calculation is performed
    # lj - use embedded Lennard-Jones pair potential   #            Can be used for testing 
    #   abinitio:r-min              2.0                # <double>    Minimizer of the pair function (in Angstroms)
    #   abinitio:scale              1.0                # <double>    Value of pair function in minimum (in eV)
    #   abinitio:cutoff             5.0                # <double>    Cut-off radius (in Angstroms)
    # vasp - VASP                                      #            Use DFT model by VASP. Linking via files exchange
        abinitio:poscar             vasp_tmp/POSCAR    # <string>    Hint: Path can be specified here
        abinitio:outcar             vasp_tmp/OUTCAR    # <string>    Hint: Path can be specified here
        abinitio:start-command      ./vasp             # <string>    Command to environment for starting VASP (Hint: it can be usefull to specify here the command for launching a script that launches VASP)
    # lammps - LAMMPS                                  #            Use potentials clculating by LAMMPS. Linking via files exchange
    #   abinitio:input-file         dump.inp           # <string>    File with configuration to be read by lammps
    #   abinitio:output-file        dump.out           # <string>    File with configuration and EFS data to be read by MLIP
    #   abinitio:start-command      ./lmp.sh           # <string>    Command to environment for starting LAMMPS (Hint: it can be usefull to specify here the command for launching a script that launches LAMMPS)
    # mtp - use pre-trained MTP                        #            Use MTP as Ab-initio potential
    #   abinitio:filename           pot.mtp      # <string>    MTP file name
